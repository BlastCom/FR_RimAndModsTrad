#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define bufferSize 2048
#define DEFNAME_SIZE 64
#define BALISENAME_SIZE 256
#define TEXT_SIZE 1024

int main()
{
	FILE* readFile;
	FILE* writeFile;

	char buffer[bufferSize];
	char* strBuffer;
	char bufferWrite[bufferSize];

	char defName[64];
	char baliseName[256];
	char text[1024];
	char infoFolderName[128] = "[!] This file should be in a folder named '' [!]";
	char* ptrInfoFolderNameGoes = &infoFolderName[43];
	char tmp[10] = { 0 };
	char credit[] = "\n\nThis file was generated by a program made by Simon Laflamme ( FlammyHazard / BlastCom )";

	int i;
	int index;
	int infoFlag = false;
	int counter = 0;

	fopen_s(&readFile, "input.txt", "r");
	fopen_s(&writeFile, "output.txt", "w");

	if (readFile == NULL)
	{
		printf("ERROR READ; PROGRAM STOPED\n");
		return 0;
	}

	if (writeFile == NULL)
	{
		printf("ERROR WRITE; PROGRAM STOPED\n");
		return 0;
	}

	while (!feof(readFile))
	{

		/*======= Read function // Get information from input=======*/
		memset(buffer, 0, sizeof(buffer));
		memset(defName, 0, sizeof(defName));
		memset(baliseName, 0, sizeof(baliseName));
		memset(text, 0, sizeof(text));

		fgets(buffer, bufferSize, readFile);
		strBuffer = buffer;

		for (i = 0; i < 2; i++)
		{
			index = 0;
			do
			{
				if (i == 0)
					defName[index++] = strBuffer[0];
				else if (i == 1)
					baliseName[index++] = strBuffer[0];
				strBuffer++;

				if (i == 0 && index >= DEFNAME_SIZE)
				{
					printf("\nERROR OVERFLOW DEFNAME; PROGRAM STOPED\n");
					system("pause");
					return 0;
				}
				else if (i == 1 && index >= BALISENAME_SIZE)
				{
					printf("\nERROR OVERFLOW BALISENAME; PROGRAM STOPED\n");
					system("pause");
					return 0;
				}

			} while (strBuffer[0] != ' ');
			strBuffer++;

			if (i == 0)
				defName[--index] = '\0';
			else if (i == 1)
				baliseName[index] = '\0';
		}

		strBuffer++;
		index = 0;

		do
		{
			text[index++] = strBuffer[0];
			strBuffer++;
			if (index >= TEXT_SIZE)
			{
				printf("\nERROR OVERFLOW TEXT; PROGRAM STOPED\n");
				system("pause");
				return 0;
			}

		} while (strBuffer[0] != 39);
		text[index] = '\0';
		/*======= End of Read function =======*/

		/*======= Write function // Put new information format in output =======*/
		memset(bufferWrite, 0, sizeof(bufferWrite));

		if (!infoFlag)
		{
			memcpy(tmp, ptrInfoFolderNameGoes, strlen(ptrInfoFolderNameGoes));
			memcpy(ptrInfoFolderNameGoes, defName, strlen(defName));
			
			ptrInfoFolderNameGoes += strlen(defName);
			memcpy(ptrInfoFolderNameGoes, tmp, strlen(tmp) + 1);

			fputs(infoFolderName, writeFile);
			fputs("\n\n", writeFile);

			infoFlag = true;
		}

		index = 0;
		bufferWrite[index++] = '\t';
		bufferWrite[index++] = '<';
		strcat(bufferWrite, baliseName);
		index += strlen(baliseName);
		bufferWrite[index++] = '>';
		strcat(bufferWrite, text);
		index += strlen(text);
		bufferWrite[index++] = '<';
		bufferWrite[index++] = '/';
		strcat(bufferWrite, baliseName);
		index += strlen(baliseName);
		bufferWrite[index++] = '>';
		bufferWrite[index++] = '\n';

		fputs(bufferWrite, writeFile);

		/*======= End of Write function =======*/
		counter++;
	}

	fputs(credit, writeFile);

	printf("Process Done !\n");
	printf("%i xml tags were generated from the input file.\nThe output can be found inside output.xml\n\n", counter);

	system("pause");
	fclose(readFile);
	fclose(writeFile);
	return 0;
}