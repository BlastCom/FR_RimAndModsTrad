#define _CRT_SECURE_NO_WARNINGS

#define BUFFER_SIZE 2048
#define DEFNAME_SIZE 64
#define BALISENAME_SIZE 256
#define TEXT_SIZE 1024

#define APOSTROPHE_ASCII 39

#define SUCCES 0
#define ERROR_DEFNAME 1
#define	ERROR_BALISENAME 2
#define ERROR_TEXT 3
#define ERROR_ROWBLANK 10

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

int readRepport(FILE * readFile, char* defName, char* baliseName, char* text);
int writeXML(FILE* writeFile, char* defName, char* baliseName, char* text);

int main()
{
	FILE* readFile;
	FILE* writeFile;

	/*
	char buffer[BUFFER_SIZE];
	char* strBuffer;
	char bufferWrite[BUFFER_SIZE];
	*/
	char defName[64];
	char baliseName[256];
	char text[1024];
	char infoFolderName[128] = "[!] This file should be in a folder named '' [!]";
	char* ptrInfoFolderNameGoes = &infoFolderName[43];
	char tmp[10] = { 0 };
	char credit[] = "\n\nThis file was generated by a program made by Simon Laflamme ( FlammyHazard / BlastCom )";
	

	/*
	int i;
	int index;
	*/

	int infoFlag = false;
	int counter = 0;
	int errorContainer = 0;
	int rowBlankFlag = false;

	fopen_s(&readFile, "input.txt", "r");
	fopen_s(&writeFile, "output.txt", "w");

	if (readFile == NULL)
	{
		printf("ERROR READ; PROGRAM STOPED\n");
		return 0;
	}

	if (writeFile == NULL)
	{
		printf("ERROR WRITE; PROGRAM STOPED\n");
		return 0;
	}

	while (!feof(readFile))
	{
		rowBlankFlag = false;
		errorContainer = 0;

		/*======= Read function // Get information from input=======*/
		 errorContainer = readRepport(readFile, defName, baliseName, text);

		 if (errorContainer)
		 {
			 if (errorContainer == ERROR_DEFNAME)
			 {
				 printf("\nERROR OVERFLOW DEFNAME; PROGRAM STOPED\n");
				 fclose(readFile);
				 fclose(writeFile);
				 system("pause");
				 return 0;
			 }
			 else if (errorContainer == ERROR_BALISENAME)
			 {
				 printf("\nERROR OVERFLOW BALISENAME; PROGRAM STOPED\n");
				 fclose(readFile);
				 fclose(writeFile);
				 system("pause");
				 return 0;
			 }
			 else if (errorContainer == ERROR_TEXT)
			 {
				 printf("\nERROR OVERFLOW TEXT; PROGRAM STOPED\n");
				 fclose(readFile);
				 fclose(writeFile);
				 system("pause");
				 return 0;
			 }
			 else if (errorContainer == ERROR_ROWBLANK)
			 {
				 // Non-fatal Error; Program continue.
				 rowBlankFlag = true;
			 }

		 }
			 
		/*======= End of Read function =======*/

		/*======= Write function // Put new information format in output =======*/
		 if (!infoFlag)
		 {
			 memcpy(tmp, ptrInfoFolderNameGoes, strlen(ptrInfoFolderNameGoes));
			 memcpy(ptrInfoFolderNameGoes, defName, strlen(defName));

			 ptrInfoFolderNameGoes += strlen(defName);
			 memcpy(ptrInfoFolderNameGoes, tmp, strlen(tmp) + 1);

			 fputs(infoFolderName, writeFile);
			 fputs("\n\n", writeFile);

			 infoFlag = true;
		 }
		 
		 if (!rowBlankFlag)
		 {
			 errorContainer = writeXML(writeFile, defName, baliseName, text);

			 if (errorContainer)
			 {
				 //Future error management for write function
			 }

			 counter++;
		 }

		 /*======= End of Write function =======*/
	}

	fputs(credit, writeFile);

	printf("Process Done !\n");
	printf("%i xml tags were generated from the input file.\nThe output can be found inside output.xml\n\n", counter);

	fclose(readFile);
	fclose(writeFile);
	system("pause");
	return 0;
}

int readRepport(FILE * readFile, char * defName, char * baliseName, char * text)
{
	char buffer[BUFFER_SIZE];
	char* strBuffer;
	char * ptrLastApostrophe;

	int i;
	int index;

	memset(buffer, 0, sizeof(buffer));
	memset(defName, 0, sizeof(defName));
	memset(baliseName, 0, sizeof(baliseName));
	memset(text, 0, sizeof(text));

	fgets(buffer, BUFFER_SIZE, readFile);
	strBuffer = buffer;

	for (i = 0; i < 2; i++)
	{
		index = 0;
		do
		{
			while (strBuffer[0] == '\t' || strBuffer[0] == ' ' || strBuffer[0] == '\n' || strBuffer[0] == 0)
			{
				strBuffer++;
				if (strBuffer[0] == '\0')
				{
					return ERROR_ROWBLANK;
				}
			}
			if (i == 0)
				defName[index++] = strBuffer[0];
			else if (i == 1)
				baliseName[index++] = strBuffer[0];
			strBuffer++;

			if (i == 0 && index >= DEFNAME_SIZE)
				return ERROR_DEFNAME;
			else if (i == 1 && index >= BALISENAME_SIZE)
				return ERROR_BALISENAME;
			
		} while (strBuffer[0] != ' ');
		strBuffer++;

		if (i == 0)
			defName[--index] = '\0';
		else if (i == 1)
			baliseName[index] = '\0';
	}

	strBuffer++;
	index = 0;
	ptrLastApostrophe = strrchr(strBuffer, APOSTROPHE_ASCII);
	do
	{
		text[index++] = strBuffer[0];
		strBuffer++;
		if (index >= TEXT_SIZE)
			return ERROR_TEXT;

	} while (ptrLastApostrophe != strBuffer);
	text[index] = '\0';

	return SUCCES;
}

int writeXML(FILE* writeFile, char* defName, char* baliseName, char* text)
{
	char bufferWrite[BUFFER_SIZE];

	int index;

	memset(bufferWrite, 0, sizeof(bufferWrite));

	index = 0;
	bufferWrite[index++] = '\t';
	bufferWrite[index++] = '<';
	strcat(bufferWrite, baliseName);
	index += strlen(baliseName);
	bufferWrite[index++] = '>';
	strcat(bufferWrite, text);
	index += strlen(text);
	bufferWrite[index++] = '<';
	bufferWrite[index++] = '/';
	strcat(bufferWrite, baliseName);
	index += strlen(baliseName);
	bufferWrite[index++] = '>';
	bufferWrite[index++] = '\n';

	fputs(bufferWrite, writeFile);

	return 0;
}